% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/request_values.R
\name{request_ss_append_values}
\alias{request_ss_append_values}
\title{Append values in a given range in a sheet}
\usage{
request_ss_append_values(
  spreadsheetId,
  range,
  values,
  valueInputOption = c("RAW", "USER_ENTERED"),
  insertDataOption = c("INSERT_ROWS", "OVERWRITE"),
  includeValuesInResponse = FALSE,
  responseValueRenderOption = c("FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA"),
  responseDateTimeRenderOption = c("SERIAL_NUMBER", "FORMATTED_STRING")
)
}
\arguments{
\item{spreadsheetId}{ID of the spreadsheet}

\item{range}{specified range in \emph{A1} or \emph{R1C1} notation.
See \code{\link[=get_A1_not]{get_A1_not()}} for more info.}

\item{values}{object of class \link{ValueRange} containing values to update}

\item{valueInputOption}{how the input data should be interpreted}

\item{insertDataOption}{How the input data should be inserted.}

\item{includeValuesInResponse}{if \code{TRUE}, the updated values will be received
in response.}

\item{responseValueRenderOption}{How the values in the response should be
rendered}

\item{responseDateTimeRenderOption}{How dates, times and durations in the
response should be rendered}
}
\value{
\link{UpdateValuesResponse} object
}
\description{
Send a request to append values to a sheet. The input range is
used to search for existing data and find a "table" within that range. Values
will be appended to the next row of the table, starting with the first column
of the table.

Communicates with \href{https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append}{spreadsheets.values.append}
method.
}
\section{valueInputOption options}{

\itemize{
\item \strong{RAW}: The values the user has entered will not be parsed and will be
stored as-is.
\item \strong{USER_ENTERED}: The values will be parsed as if the user typed them into
the UI. Numbers will stay as numbers, but strings may be converted to
numbers, dates, etc. following the same rules that are applied when entering
text into a cell via the Google Sheets UI.
}
}

\section{insertDataOption options}{

\itemize{
\item \strong{OVERWRITE}: The new data overwrites existing data in the areas it is written.
(Note: adding data to the end of the sheet will still insert new rows or
columns so the data can be written.)
\item \strong{INSERT_ROWS}: Rows are inserted for the new data.
}
}

\section{responseValueRenderOption options}{

\itemize{
\item \strong{FORMATTED_VALUE}: Values will be calculated & formatted in the reply
according to the cell's formatting. Formatting is based on the
spreadsheet's locale, not the requesting user's locale. For example,
if A1 is 1.23 and A2 is =A1 and formatted as currency,
then A2 would return "$1.23".
\item \strong{UNFORMATTED_VALUE}: Values will be calculated, but not formatted in the
reply. For example, if A1 is 1.23 and A2 is =A1 and formatted as currency,
then A2 would return the number 1.23.
\item \strong{FORMULA}: Values will not be calculated. The reply will include the
formulas. For example, if A1 is 1.23 and A2 is =A1 and formatted as
currency, then A2 would return "=A1".
}
}

\section{responseDateTimeRenderOption options}{

\itemize{
\item \strong{SERIAL_NUMBER}: Instructs date, time, datetime, and duration fields to
be output as doubles in "serial number" format. For more info, see \code{\link[=dgs4_serial_number]{dgs4_serial_number()}}
\item \strong{FORMATTED_STRING}: Instructs date, time, datetime, and duration fields
to be output as strings in their given number format (which depends
on the spreadsheet locale).
}
}

\seealso{
Other Sheets Values requests: 
\code{\link{request_ss_clear_values}()},
\code{\link{request_ss_get_values}()},
\code{\link{request_ss_update_values}()}
}
\concept{Sheets Values requests}
